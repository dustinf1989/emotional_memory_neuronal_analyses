knitr::opts_chunk$set(echo = TRUE)
install.packages("lmer")
install.packages("lme4")
install.packages("readr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggbeeswarm")
install.packages("Rmisc")
install.packages("here")
install.packages("afex")
install.packages("emmeans")
install.packages("lmerTest")
install.packages("optimx")
install.packages("kableExtra")
install.packages("here")
install.packages("broom")
install.packages("lsr")
install.packages("effectsize")
install.packages("car")
library(readr)
library(tidyverse)
library(ggplot2)
library(ggbeeswarm)
library(Rmisc)
library(here)
library(afex)
library(emmeans)
library(lme4)
library(lmerTest)
library(optimx)
library(kableExtra)
library(here)
library(broom)
library(lsr)
library(effectsize)
library(car)
DataEncoding <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/enc","encoding_trial_results_LMM_final.csv"))
DataRecognition <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/rec","recognition_trial_results_LMM_final.csv"))
# Delete trials/rows with NA in remfor column (due to either not having a response in test or to have responded know which we exclude)
DataEncoding <- DataEncoding %>%
filter(!is.na(remfor))
DataRecognition <- DataRecognition %>%
filter(!is.na(remfor))
# `Recode the  memory column without the emotion information
DataEncoding <- DataEncoding %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eF" = "F",
"nF" = "F",
"eR" = "R",
"nR" = "R",
"eK"  = "K",
"nK"  = "K"))
DataRecognition <- DataRecognition %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eRHit" = "RHit",
"nRHit" = "RHit",
"eCR" = "CR",
"nCR" = "CR",
"eM" = "M",
"nM" = "M",
"eKHit" = "K",
"nKHit" = "K"))
DataEncodingRF <- DataEncoding %>%
dplyr::filter(memory == "R" | memory == "F")
DataEncodingRF$emoneu <- as.factor(DataEncodingRF$emoneu)
DataEncodingRF$memory <- as.factor(DataEncodingRF$memory)
contrasts(DataEncodingRF$emoneu) <- contr.sum(levels(DataEncodingRF$emoneu))
contrasts(DataEncodingRF$memory) <- contr.sum(levels(DataEncodingRF$memory))
EncodingLMMSubjectNeuronRFrawAbsAllZ <-lme4::lmer(rawAbsAllZ ~ 1 + emoneu * memory + (1|subject/subjNeur), data = DataEncodingRF)
knitr::opts_chunk$set(echo = TRUE)
install.packages("lmer")
install.packages("lme4")
install.packages("lme4")
knitr::opts_chunk$set(echo = TRUE)
install.packages("readr")
install.packages("lmer")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("lmer")
install.packages("lme4")
install.packages("readr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggbeeswarm")
install.packages("Rmisc")
install.packages("here")
install.packages("afex")
install.packages("emmeans")
install.packages("lmerTest")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("lmer")
install.packages("lme4")
install.packages("readr")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("lmer")
install.packages("lme4")
install.packages("readr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggbeeswarm")
install.packages("Rmisc")
install.packages("here")
install.packages("afex")
install.packages("emmeans")
install.packages("lmerTest")
install.packages("optimx")
install.packages("kableExtra")
install.packages("here")
install.packages("broom")
install.packages("lsr")
install.packages("effectsize")
install.packages("car")
library(readr)
library(tidyverse)
library(ggplot2)
library(ggbeeswarm)
library(Rmisc)
library(here)
library(afex)
library(emmeans)
library(lme4)
library(lmerTest)
library(optimx)
library(kableExtra)
library(here)
library(broom)
library(lsr)
library(effectsize)
library(car)
DataEncoding <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/enc","encoding_trial_results_LMM_final.csv"))
DataRecognition <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/rec","recognition_trial_results_LMM_final.csv"))
# Delete trials/rows with NA in remfor column (due to either not having a response in test or to have responded know which we exclude)
DataEncoding <- DataEncoding %>%
filter(!is.na(remfor))
DataRecognition <- DataRecognition %>%
filter(!is.na(remfor))
# `Recode the  memory column without the emotion information
DataEncoding <- DataEncoding %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eF" = "F",
"nF" = "F",
"eR" = "R",
"nR" = "R",
"eK"  = "K",
"nK"  = "K"))
DataRecognition <- DataRecognition %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eRHit" = "RHit",
"nRHit" = "RHit",
"eCR" = "CR",
"nCR" = "CR",
"eM" = "M",
"nM" = "M",
"eKHit" = "K",
"nKHit" = "K"))
DataEncodingRF <- DataEncoding %>%
dplyr::filter(memory == "R" | memory == "F")
DataEncodingRF$emoneu <- as.factor(DataEncodingRF$emoneu)
DataEncodingRF$memory <- as.factor(DataEncodingRF$memory)
contrasts(DataEncodingRF$emoneu) <- contr.sum(levels(DataEncodingRF$emoneu))
contrasts(DataEncodingRF$memory) <- contr.sum(levels(DataEncodingRF$memory))
EncodingLMMSubjectNeuronRFrawAbsAllZ <-lme4::lmer(rawAbsAllZ ~ 1 + emoneu * memory + (1|subject/subjNeur), data = DataEncodingRF)
install.packages("lmer")
install.packages("lmer")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("lmer")
#install.packages("lme4")
#install.packages("readr")
#install.packages("tidyverse")
#install.packages("ggplot2")
#install.packages("ggbeeswarm")
#install.packages("Rmisc")
#install.packages("here")
#install.packages("afex")
#install.packages("emmeans")
#install.packages("lmerTest")
#install.packages("optimx")
#install.packages("kableExtra")
#install.packages("here")
#install.packages("broom")
#install.packages("lsr")
#install.packages("effectsize")
#install.packages("car")
library(readr)
library(tidyverse)
library(ggplot2)
library(ggbeeswarm)
library(Rmisc)
library(here)
library(afex)
library(emmeans)
library(lme4)
library(lmerTest)
library(optimx)
library(kableExtra)
library(here)
library(broom)
library(lsr)
library(effectsize)
library(car)
DataEncoding <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/enc","encoding_trial_results_LMM_final.csv"))
DataRecognition <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/rec","recognition_trial_results_LMM_final.csv"))
# Delete trials/rows with NA in remfor column (due to either not having a response in test or to have responded know which we exclude)
DataEncoding <- DataEncoding %>%
filter(!is.na(remfor))
DataRecognition <- DataRecognition %>%
filter(!is.na(remfor))
# `Recode the  memory column without the emotion information
DataEncoding <- DataEncoding %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eF" = "F",
"nF" = "F",
"eR" = "R",
"nR" = "R",
"eK"  = "K",
"nK"  = "K"))
DataRecognition <- DataRecognition %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eRHit" = "RHit",
"nRHit" = "RHit",
"eCR" = "CR",
"nCR" = "CR",
"eM" = "M",
"nM" = "M",
"eKHit" = "K",
"nKHit" = "K"))
DataEncodingRF <- DataEncoding %>%
dplyr::filter(memory == "R" | memory == "F")
DataEncodingRF$emoneu <- as.factor(DataEncodingRF$emoneu)
DataEncodingRF$memory <- as.factor(DataEncodingRF$memory)
contrasts(DataEncodingRF$emoneu) <- contr.sum(levels(DataEncodingRF$emoneu))
contrasts(DataEncodingRF$memory) <- contr.sum(levels(DataEncodingRF$memory))
EncodingLMMSubjectNeuronRFrawAbsAllZ <-lme4::lmer(rawAbsAllZ ~ 1 + emoneu * memory + (1|subject/subjNeur), data = DataEncodingRF)
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix")
install.packages("lme4")
options(oo)
install.packages("Matrix")
install.packages("Matrix")
knitr::opts_chunk$set(echo = TRUE)
install.packages("lme4", type = "source")
install.packages("lme4", type = "source")
install.packages("lme4", type = "source")
knitr::opts_chunk$set(echo = TRUE)
#oo <- options(repos = "https://cran.r-project.org/")
#install.packages("Matrix")
#install.packages("lme4")
#options(oo)
#install.packages("lme4", type = "source")
# install.packages("lmer")
#install.packages("lme4")
#install.packages("readr")
#install.packages("tidyverse")
#install.packages("ggplot2")
#install.packages("ggbeeswarm")
#install.packages("Rmisc")
#install.packages("here")
#install.packages("afex")
#install.packages("emmeans")
#install.packages("lmerTest")
#install.packages("optimx")
#install.packages("kableExtra")
#install.packages("here")
#install.packages("broom")
#install.packages("lsr")
#install.packages("effectsize")
#install.packages("car")
library(readr)
library(tidyverse)
library(ggplot2)
library(ggbeeswarm)
library(Rmisc)
library(here)
library(afex)
library(emmeans)
library(lme4)
library(lmerTest)
library(optimx)
library(kableExtra)
library(here)
library(broom)
library(lsr)
library(effectsize)
library(car)
DataEncoding <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/enc","encoding_trial_results_LMM_final.csv"))
DataRecognition <- read_csv(here::here("C:/Users/drdus/Documents/emotional_memory_neuronal_data/rec","recognition_trial_results_LMM_final.csv"))
# Delete trials/rows with NA in remfor column (due to either not having a response in test or to have responded know which we exclude)
DataEncoding <- DataEncoding %>%
filter(!is.na(remfor))
DataRecognition <- DataRecognition %>%
filter(!is.na(remfor))
# `Recode the  memory column without the emotion information
DataEncoding <- DataEncoding %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eF" = "F",
"nF" = "F",
"eR" = "R",
"nR" = "R",
"eK"  = "K",
"nK"  = "K"))
DataRecognition <- DataRecognition %>%
dplyr::mutate(memory = dplyr::recode(remfor,
"eRHit" = "RHit",
"nRHit" = "RHit",
"eCR" = "CR",
"nCR" = "CR",
"eM" = "M",
"nM" = "M",
"eKHit" = "K",
"nKHit" = "K"))
DataEncodingRF <- DataEncoding %>%
dplyr::filter(memory == "R" | memory == "F")
DataEncodingRF$emoneu <- as.factor(DataEncodingRF$emoneu)
DataEncodingRF$memory <- as.factor(DataEncodingRF$memory)
contrasts(DataEncodingRF$emoneu) <- contr.sum(levels(DataEncodingRF$emoneu))
contrasts(DataEncodingRF$memory) <- contr.sum(levels(DataEncodingRF$memory))
EncodingLMMSubjectNeuronRFrawAbsAllZ <-lme4::lmer(rawAbsAllZ ~ 1 + emoneu * memory + (1|subject/subjNeur), data = DataEncodingRF)
tools::package_dependencies("Matrix", which = "LinkingTo", reverse = TRUE)[[1L]]
[1] "ahMLE"               "bayesWatch"          "cplm"
tools::package_dependencies("Matrix", which = "LinkingTo", reverse = TRUE)[[1L]]
"ahMLE"               "bayesWatch"          "cplm"
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix")
install.packages("lme4")
options(oo)
install.packages("lme4")
install.packages("lme4")
